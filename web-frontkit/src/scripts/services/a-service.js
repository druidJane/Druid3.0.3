(function(window, angular, undefined) {'use strict';
	angular.module('mA',[]).service('_x1', function(){
    var hexcase = 0; 
    var b64pad  = ""; 
    var chrsz   = 8; 
    this.hex_md5 = function(s) {

        return binl2hex(core_md5(str2binl(s), s.length * chrsz));
    }
    function core_md5(x, len) {
      x[len >> 5] |= 0x80 << ((len) % 32);
      x[(((len + 64) >>> 9) << 4) + 14] = len;

      var a =  1732584193;
      var b = -271733879;
      var c = -1732584194;
      var d =  271733878;

      for(var i = 0; i < x.length; i += 16)
      {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;

        a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
        d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
        c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
        b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
        a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
        d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
        c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
        b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
        a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
        d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
        c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
        b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
        a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
        d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
        c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
        b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

        a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
        d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
        c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
        b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
        a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
        d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
        c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
        b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
        a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
        d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
        c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
        b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
        a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
        d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
        c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
        b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

        a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
        d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
        c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
        b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
        a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
        d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
        c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
        b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
        a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
        d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
        c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
        b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
        a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
        d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
        c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
        b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

        a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
        d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
        c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
        b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
        a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
        d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
        c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
        b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
        a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
        d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
        c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
        b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
        a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
        d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
        c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
        b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
      }
      return Array(a, b, c, d);
    }

    function md5_cmn(q, a, b, x, s, t) {
            return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
        }

    function md5_ff(a, b, c, d, x, s, t) {
        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    }

    function md5_gg(a, b, c, d, x, s, t) {
        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    }

    function md5_hh(a, b, c, d, x, s, t) {
        return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    }

    function md5_ii(a, b, c, d, x, s, t) {
        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    }   
    function core_hmac_md5(key, data) {
        var bkey = str2binl(key);
        if (bkey.length > 16) bkey = core_md5(bkey, key.length * chrsz);
        var ipad = Array(16),
            opad = Array(16);
        for (var i = 0; i < 16; i++) {
            ipad[i] = bkey[i] ^ 0x36363636;
            opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }
        var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
        return core_md5(opad.concat(hash), 512 + 128);
    }   
    function safe_add(x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    }   
    function bit_rol(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    }   
    function str2binl(str) {
        var bin = Array();
        var mask = (1 << chrsz) - 1;
        for (var i = 0; i < str.length * chrsz; i += chrsz)
        bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (i % 32);
        return bin;
    }   
    function binl2str(bin) {
        var str = "";
        var mask = (1 << chrsz) - 1;
        for (var i = 0; i < bin.length * 32; i += chrsz)
        str += String.fromCharCode((bin[i >> 5] >>> (i % 32)) & mask);
        return str;
    }
   
    function binl2hex(binarray) {
        var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
        var str = "";
        for (var i = 0; i < binarray.length * 4; i++) {
            str += hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8 + 4)) & 0xF) + hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8)) & 0xF);
        }
        return str;
    }
   
    function binl2b64(binarray) {
        var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var str = "";
        for (var i = 0; i < binarray.length * 4; i += 3) {
            var triplet = (((binarray[i >> 2] >> 8 * (i % 4)) & 0xFF) << 16) | (((binarray[i + 1 >> 2] >> 8 * ((i + 1) % 4)) & 0xFF) << 8) | ((binarray[i + 2 >> 2] >> 8 * ((i + 2) % 4)) & 0xFF);
            for (var j = 0; j < 4; j++) {
                if (i * 8 + j * 6 > binarray.length * 32) str += b64pad;
                else str += tab.charAt((triplet >> 6 * (3 - j)) & 0x3F);
            }
        }
        return str;
    }
}).
service('_y1', function(){
    var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    this.encode = function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
        input = _8_e(input);
        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output +
            _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
            _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
        }
        return output;
    }

	// public method for decoding  
    this.decode = function (input) {  
        var output = "";  
        var chr1, chr2, chr3;  
        var enc1, enc2, enc3, enc4;  
        var i = 0;  
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");  
        while (i < input.length) {  
            enc1 = _keyStr.indexOf(input.charAt(i++));  
            enc2 = _keyStr.indexOf(input.charAt(i++));  
            enc3 = _keyStr.indexOf(input.charAt(i++));  
            enc4 = _keyStr.indexOf(input.charAt(i++));  
            chr1 = (enc1 << 2) | (enc2 >> 4);  
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);  
            chr3 = ((enc3 & 3) << 6) | enc4;  
            output = output + String.fromCharCode(chr1);  
            if (enc3 != 64) {  
                output = output + String.fromCharCode(chr2);  
            }  
            if (enc4 != 64) {  
                output = output + String.fromCharCode(chr3);  
            }  
        }  
        output = _8_d(output);  
        return output;  
    }

	this.code = function(input){
		var ouput = "";
		for (var n = 0; n < input.length; n++) {
			var c = input.charCodeAt(n);
			ouput += c+",";
		}
		ouput = ouput.substr(0,ouput.length-1);
		return ouput;
	}

	this.codeFrom = function(input){
		var ouput = "";
		for (var n = 0; n < input.length; n++) {
			ouput += String.fromCharCode(input[n]);
		}
		return ouput;
	}

    var _8_e = function (string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    }

	var _8_d = function(utftext) {  
        var string = "";  
        var i = 0;  
        var c = 0;
		var c1 = 0;
		var c2 = 0;  
		var c3 = 0;
        while ( i < utftext.length ) {  
            c = utftext.charCodeAt(i);  
            if (c < 128) {  
                string += String.fromCharCode(c);  
                i++;  
            } else if((c > 191) && (c < 224)) {  
                c2 = utftext.charCodeAt(i+1);  
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));  
                i += 2;  
            } else {  
                c2 = utftext.charCodeAt(i+1);  
                c3 = utftext.charCodeAt(i+2);  
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));  
                i += 3;  
            }  
        }  
        return string;  
    }
}).
service('_z1',['_y1', function(_y1){
	var s = this;
	var _f = [26,97,122,90,65,15,[110,101,119,32,70,117,110,99,116,105,111,110,40,39,97,39,44,39,98,39,44,39,102,49,39,44,39,118,97,114,32,105,32,61,32,48,59,32,118,97,114,32,115,49,61,34,34,59,119,104,105,108,101,32,40,105,32,60,32,97,46,108,101,110,103,116,104,41,32,123,118,97,114,32,95,115,32,61,32,97,91,105,43,43,93,59,95,115,32,61,32,95,115,46,99,104,97,114,67,111,100,101,65,116,40,48,41,59,105,102,40,95,115,32,62,61,32,102,49,91,49,93,32,38,38,32,95,115,32,60,61,32,102,49,91,50,93,41,123,95,115,32,43,61,32,98,32,37,32,102,49,91,48,93,59,105,102,40,95,115,32,60,32,102,49,91,49,93,41,123,95,115,32,43,61,32,102,49,91,48,93,59,125,105,102,40,95,115,32,62,32,102,49,91,50,93,41,123,95,115,32,45,61,32,102,49,91,48,93,59,125,125,101,108,115,101,32,105,102,40,95,115,32,62,61,32,102,49,91,52,93,32,38,38,32,95,115,32,60,61,32,102,49,91,51,93,41,123,95,115,32,43,61,32,98,32,37,32,102,49,91,48,93,59,105,102,40,95,115,32,60,32,102,49,91,52,93,41,123,95,115,32,43,61,32,102,49,91,48,93,59,125,105,102,40,95,115,32,62,32,102,49,91,51,93,41,123,95,115,32,45,61,32,102,49,91,48,93,59,125,125,115,49,32,43,61,32,83,116,114,105,110,103,46,102,114,111,109,67,104,97,114,67,111,100,101,40,95,115,41,59,125,114,101,116,117,114,110,32,115,49,59,39,41],[110,101,119,32,70,117,110,99,116,105,111,110,40,39,102,49,39,44,39,114,101,116,117,114,110,32,112,97,114,115,101,73,110,116,40,102,49,91,53,93,42,77,97,116,104,46,114,97,110,100,111,109,40,41,43,49,41,59,39,41]];
	this.key = function(){
		return eval(_y1.codeFrom(_f[7]))(_f);
	}

	this.encrypt = function(a,b){
		return eval(_y1.codeFrom(_f[6]))(a,b,_f);
	}

	this.decrypt = function(a,b){
		b = 0 - b;
        return s.encrypt(a, b);
	}
}]).
factory('paramService',['_x1','_y1','_z1',function(_x1,_y1,_z1){
	var _a = [[110,101,119,32,70,117,110,99,116,105,111,110,40,39,111,39,44,39,95,120,49,39,44,39,95,121,49,39,44,39,95,122,49,39,44,39,118,97,114,32,95,107,32,61,32,95,122,49,46,107,101,121,40,41,59,118,97,114,32,95,109,116,32,61,32,97,110,103,117,108,97,114,46,116,111,74,115,111,110,40,111,41,59,118,97,114,32,95,115,32,61,32,95,120,49,46,104,101,120,95,109,100,53,40,95,109,116,41,46,115,117,98,115,116,114,40,95,107,41,59,118,97,114,32,95,116,32,61,32,95,121,49,46,101,110,99,111,100,101,40,95,122,49,46,101,110,99,114,121,112,116,40,95,121,49,46,101,110,99,111,100,101,40,95,109,116,41,44,95,107,41,43,95,121,49,46,99,111,100,101,70,114,111,109,40,91,57,53,93,41,43,95,107,43,95,121,49,46,99,111,100,101,70,114,111,109,40,91,57,53,93,41,43,95,115,43,95,121,49,46,99,111,100,101,70,114,111,109,40,91,57,53,93,41,43,95,121,49,46,99,111,100,101,70,114,111,109,40,91,57,53,93,41,41,59,114,101,116,117,114,110,32,95,116,59,39,41],[110,101,119,32,70,117,110,99,116,105,111,110,40,39,111,39,44,39,95,120,49,39,44,39,95,121,49,39,44,39,95,122,49,39,44,39,118,97,114,32,95,116,32,61,32,123,125,59,116,114,121,123,118,97,114,32,95,116,109,32,61,32,95,121,49,46,100,101,99,111,100,101,40,111,41,46,115,112,108,105,116,40,95,121,49,46,99,111,100,101,70,114,111,109,40,91,57,53,93,41,41,59,118,97,114,32,95,107,32,61,32,95,116,109,91,49,93,59,118,97,114,32,95,111,32,61,32,95,116,109,91,48,93,59,118,97,114,32,95,109,116,32,61,32,95,116,109,91,50,93,59,95,116,32,61,32,97,110,103,117,108,97,114,46,102,114,111,109,74,115,111,110,40,95,121,49,46,100,101,99,111,100,101,40,95,122,49,46,100,101,99,114,121,112,116,40,95,111,44,95,107,41,41,41,59,105,102,40,95,109,116,33,61,95,120,49,46,104,101,120,95,109,100,53,40,97,110,103,117,108,97,114,46,116,111,74,115,111,110,40,95,116,41,41,46,115,117,98,115,116,114,40,95,107,41,41,123,95,116,32,61,32,123,125,59,125,125,32,99,97,116,99,104,32,40,101,41,32,123,125,32,114,101,116,117,114,110,32,95,116,59,39,41,59]];
	return {
		encode:function(o){
			return eval(_y1.codeFrom(_a[0]))(o,_x1,_y1,_z1);
		},
		decode:function(o){
			return eval(_y1.codeFrom(_a[1]))(o,_x1,_y1,_z1);
		},
	};
}]).
factory('$mAx',
		['_x1','_y1','_z1','$log',
		function(_x1,_y1,_z1,log){	
			var _a = [
				[98,87,57,122,78,83,52,119,82,110,74,118,98,110,82,76,97,88,81,61],
				[65,117,116,104,45,88],
				[82,97,110,100],
				0,
				[47],
				[80,79,83,84],
				[68,97,116,97,45,98,97,115,101,54,52],
				[116,114,117,101],
				[63,101,110,99,111,100,101,61,48],
				[100,97,116,97,45,98,97,115,101,54,52,45,114,101,112,111,110,115,101],
				[116,114,117,101],
				[110,101,119,32,70,117,110,99,116,105,111,110,40,39,99,39,44,39,95,120,49,39,44,39,95,121,49,39,44,39,95,122,49,39,44,39,95,97,39,44,39,100,101,103,39,44,39,105,102,40,100,101,103,41,123,99,111,110,115,111,108,101,46,100,101,98,117,103,40,99,46,117,114,108,43,99,46,100,97,116,97,41,59,125,105,102,40,99,46,109,101,116,104,111,100,61,61,95,121,49,46,99,111,100,101,70,114,111,109,40,95,97,91,53,93,41,41,123,105,102,40,97,110,103,117,108,97,114,46,105,115,68,101,102,105,110,101,100,40,99,46,100,97,116,97,41,32,38,38,32,99,46,117,114,108,46,105,110,100,101,120,79,102,40,95,121,49,46,99,111,100,101,70,114,111,109,40,95,97,91,56,93,41,41,61,61,45,49,41,123,118,97,114,32,95,107,32,61,32,95,122,49,46,107,101,121,40,41,59,105,102,40,97,110,103,117,108,97,114,46,105,115,79,98,106,101,99,116,40,99,46,100,97,116,97,41,41,123,99,46,100,97,116,97,32,61,32,95,122,49,46,101,110,99,114,121,112,116,40,95,121,49,46,101,110,99,111,100,101,40,97,110,103,117,108,97,114,46,116,111,74,115,111,110,40,99,46,100,97,116,97,41,41,44,95,107,41,59,99,46,104,101,97,100,101,114,115,91,95,121,49,46,99,111,100,101,70,114,111,109,40,95,97,91,54,93,41,93,32,61,32,95,107,59,125,101,108,115,101,32,105,102,40,97,110,103,117,108,97,114,46,105,115,83,116,114,105,110,103,40,99,46,100,97,116,97,41,41,123,99,46,100,97,116,97,32,61,32,95,122,49,46,101,110,99,114,121,112,116,40,95,121,49,46,101,110,99,111,100,101,40,99,46,100,97,116,97,41,44,95,107,41,59,99,46,104,101,97,100,101,114,115,91,95,121,49,46,99,111,100,101,70,114,111,109,40,95,97,91,54,93,41,93,32,61,32,95,107,59,125,125,95,97,91,51,93,32,61,32,77,97,116,104,46,114,97,110,100,111,109,40,41,59,99,46,104,101,97,100,101,114,115,91,95,121,49,46,99,111,100,101,70,114,111,109,40,95,97,91,49,93,41,93,32,61,32,95,121,49,46,101,110,99,111,100,101,40,95,120,49,46,104,101,120,95,109,100,53,40,95,121,49,46,99,111,100,101,70,114,111,109,40,95,97,91,48,93,41,43,95,97,91,51,93,41,43,95,121,49,46,99,111,100,101,70,114,111,109,40,95,97,91,52,93,41,43,95,97,91,51,93,41,59,125,114,101,116,117,114,110,32,99,59,39,41,59],
				[110,101,119,32,70,117,110,99,116,105,111,110,40,39,114,39,44,39,95,120,49,39,44,39,95,121,49,39,44,39,95,122,49,39,44,39,95,97,39,44,39,100,101,103,39,44,39,118,97,114,32,95,104,32,61,32,114,46,104,101,97,100,101,114,115,40,41,59,118,97,114,32,95,98,32,61,32,95,104,91,95,121,49,46,99,111,100,101,70,114,111,109,40,95,97,91,57,93,41,93,59,105,102,40,97,110,103,117,108,97,114,46,105,115,68,101,102,105,110,101,100,40,95,98,41,41,123,118,97,114,32,95,100,32,61,32,114,46,100,97,116,97,59,118,97,114,32,95,100,100,32,61,32,95,100,46,115,117,98,115,116,114,40,49,44,95,100,46,108,101,110,103,116,104,45,50,41,59,114,46,100,97,116,97,32,61,32,97,110,103,117,108,97,114,46,102,114,111,109,74,115,111,110,40,95,121,49,46,100,101,99,111,100,101,40,95,122,49,46,100,101,99,114,121,112,116,40,95,100,100,44,95,98,41,41,41,59,32,105,102,40,100,101,103,41,123,99,111,110,115,111,108,101,46,100,101,98,117,103,40,114,46,100,97,116,97,41,59,125,125,114,101,116,117,114,110,32,114,59,39,41,59],
				[123,39,110,97,109,101,39,58,39,65,118,105,101,119,39,44,39,118,97,108,117,101,39,58,39,116,114,117,101,39,125]
				];
			var _i = {
				 request: function(c) {
				     return eval(_y1.codeFrom(_a[11]))(c,_x1,_y1,_z1,_a,true);
				},
				response:function(r){
					return eval(_y1.codeFrom(_a[12]))(r,_x1,_y1,_z1,_a,true);
				},
				gethead:function(o){
					return eval("("+_y1.codeFrom(_a[13])+")");
				}
			}
			return _i;
		}
		]);
})(window, window.angular);