<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.xuanwu.mos.mapper.NoticeMapper">
    <resultMap id="noticeResult" type="notice">
        <id property="id" column="id" />
        <result property="enterpriseId" column="enterprise_id" />
        <result property="messageTitle" column="message_title" />
        <result property="objectId" column="object_id" />
        <result property="createUser" column="create_user" />
        <result property="readUser" column="read_user" />
        <result property="messageType" column="message_type" />
        <result property="pushTime" column="push_time" />
        <result property="createTime" column="create_time" />
        <result property="readPermissionLevel" column="read_permission"/>
        <result property="scope" column="scope"/>
        <result property="state" column="state"/>

    </resultMap>

    <sql id="findResultsSql">
        from gsms_user_message_reminder as gumr  join gsms_message_reminder as gmr on gumr.message_id = gmr.id
        where gumr.user_id = #{params.userId} and gumr.is_remove = 0
        <if test="params.type!=null and params.type > 0">
            <choose>
                <when test="params.type == 1">and (gmr.message_type = 1 or gmr.message_type = 2) </when>
                <when test="params.type == 2">and (gmr.message_type = 3 or gmr.message_type = 4) </when>
                <when test="params.type == 3">and gmr.message_type = 5 </when>
            </choose>
        </if>
        <if test="params.msgType!=null and params.msgType > 0">
            and gmr.message_type = #{params.msgType}
        </if>
        <if test="params.state!=null and params.state!=-1">
           and gumr.state = #{params.state}
        </if>
        <if test="params.enterpriseId != null">
            and gmr.enterprise_id=#{params.enterpriseId}
        </if>
        <if test="params.beginTime != null">
            and gmr.push_time &gt;= #{params.beginTime}
        </if>
        <if test="params.endTime != null">
            and gmr.push_time &lt;= #{params.endTime}
        </if>
        
    </sql>

    <select id="getNoticeByObjectId" resultMap="noticeResult">
        select * from gsms_message_reminder where object_id = #{objectId} limit 1;
    </select>

    <select id="getUsersByMessageId" resultType="int">
        select distinct user_id from gsms_user_message_reminder where message_id = #{messageId}
    </select>

    <select id="findResultCount" resultType="int" parameterType="map">
        select count(*)
        <include refid="findResultsSql" />
    </select>

    <select id="getUsersByEnterpriseId" resultType="int">
        select id from gsms_user where enterprise_id = #{enterpriseId} and type = 2 and state != 2
    </select>

    <select id="getUsersByPermission">
         select DISTINCT gur.user_id from gsms_user_role as gur join gsms_user as gu on gu.id = gur.user_id and gu.enterprise_id = #{entId}
         where gur.role_id in
		 (select DISTINCT role_id from gsms_role_permission where permission_id =
		 (select id from gsms_permission where concat(area_name,'/',controller_name,'/',action_name) = #{url} AND platform_id = #{platformId} and share_flag in (0,2) LIMIT 1))
    </select>

    <select id="findResults" resultMap="noticeResult" parameterType="map">
        select gumr.id,gumr.state,gmr.message_title,gmr.object_id,gmr.message_type,gmr.push_time
        <include refid="findResultsSql" />
        order by gmr.push_time desc, id desc
        <if test="page != null">limit #{page.from}, #{page.size}</if>
    </select>


    <delete id="deleteById">
        delete from  gsms_message_reminder where id = #{id}
    </delete>

    <update id="deleteDetailByIds">
        update gsms_user_message_reminder set is_remove = 1 where id in (
        <foreach collection="ids" item="item" index="index" separator=",">
            #{item}
        </foreach>
        )
    </update>


    <delete id="deleteDetailsByMessageId">
        delete from  gsms_user_message_reminder where  message_id = #{messageId}
    </delete>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into gsms_message_reminder(enterprise_id,message_title,object_id,create_user,read_user,message_type,push_time,create_time,read_permission,scope)
        values (#{enterpriseId},#{messageTitle},#{objectId},#{createUser},#{readUser},#{messageType},#{pushTime},#{createTime},#{readPermission},#{scope})
    </insert>

    <insert id="insertDetail" useGeneratedKeys="true" keyProperty="id">
        insert into gsms_user_message_reminder(user_id,message_id,state)
        values (#{userId},#{messageId},#{state})
    </insert>

    <update id="updateStateByIds">
        update gsms_user_message_reminder set state = 1 where state = 0 and id in (
        <foreach collection="ids" item="item" index="index" separator=",">
            #{item}
        </foreach>
        )
    </update>

    <update id="updateDetail">
        update gsms_user_message_reminder set state = #{state}, is_remove = 0 where user_id = #{userId} and message_id = #{messageId}
    </update>

    <update id="updateNotice">
        update gsms_message_reminder set create_user = #{createUser}, push_time = #{pushTime}, message_title = #{title} where id = #{id}
    </update>
</mapper>