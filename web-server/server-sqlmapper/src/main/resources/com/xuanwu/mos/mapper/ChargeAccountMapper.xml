<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.xuanwu.web.common.dao.mapper.ChargeAccountMapper">

    <resultMap id="chargeAccountMap" type="com.xuanwu.mos.domain.entity.ChargingAccount">
        <id property="id" column="id"/>
        <result property="accountName" column="name"/>
        <result property="payingWay" column="type"/>
        <result property="balance" column="balance"/>
        <result property="chargeWay" column="charge_type"/>
        <result property="autoChargeMoney" column="auto_charge_amount"/>
        <result property="deductType" column="deduct_type"/>
        <result property="parentId" column="parent_id"/>
        <result property="userId" column="user_id"/>
        <result property="smsPrice" column="sms_price"/>
        <result property="mmsPrice" column="mms_price"/>
        <result property="chargeRatio" column="charge_ratio"/>
        <result property="differenceBalance" column="difference_balance"/>
        <result property="childBalance" column="child_balance"/>
        <result property="reChargeDate" column="rechargedate"/>
        <association property="chargingRecord" javaType="com.xuanwu.mos.domain.entity.ChargeRecord">
            <id property="id" column="charge_account_id"/>
            <result property="capitalAccountId" column="capital_account_id"/>
            <result property="autoChargeFlag" column="auto_charge_flag"/>
            <result property="chargeAmount" column="charge_amount"/>
            <result property="chargeTime" column="charge_time"/>
            <result property="remark" column="remark"/>
        </association>
    </resultMap>

    <resultMap id="userMap" type="com.xuanwu.mos.domain.entity.ChargingAccountUser">
        <id property="id" column="id"/>
        <result property="accountName" column="user_name"/>
        <result property="linkMan" column="link_man"/>
        <result property="deptName" column="dep_name"/>
        <result property="phone" column="phone"/>
        <result property="state" column="state"/>
    </resultMap>

    <resultMap id="deptMap" type="com.xuanwu.mos.domain.entity.Department">
        <id property="id" column="id"/>
        <result property="deptName" column="name"/>
    </resultMap>

    <resultMap id="chargingRecordMap" type="com.xuanwu.mos.domain.entity.ChargeRecord">
        <id property="id" column="id"/>
        <result property="capitalAccountId" column="capital_account_id"/>
        <result property="accountName" column="name"/>
        <result property="chargeAmount" column="charge_amount"/>
        <result property="chargeTime" column="charge_time"/>
        <result property="remark" column="remark"/>
        <result property="chargeWay" column="charge_type"/>
        <result property="chargeUserName" column="user_name"/>
        <result property="autoChargeFlag" column="auto_charge_flag"/>
    </resultMap>

    <select id="findChargeAccountCount" resultType="int">
        select count(1) from gsms_capital_account a where a.state=0 and a.parent_id is not null
        and a.enterprise_id=#{chargingAccount.enterpriseId}
        <if test="chargingAccount.accountName != null and chargingAccount.accountName != ''">and a.name like concat('%',#{chargingAccount.accountName},'%')</if>
        <if test="chargingAccount.payingWay >= 0">and a.type=#{chargingAccount.payingWay}</if>
        <if test="chargingAccount.chargeWay >= 0">and a.charge_type=#{chargingAccount.chargeWay}</if>
    </select>

    <select id="findChargeAccounts" resultMap="chargeAccountMap">
        select a.id, a.name, a.type, a.balance, a.charge_type, a.auto_charge_amount,a.deduct_type,
        convert(ifnull(g.auto_charge_flag,1),char) as auto_charge_flag,g.charge_time,
        g.capital_account_id, g.charge_amount, g.remark as remark, g.charge_account_id
        from gsms_capital_account a
        left join gsms_capital_account d on a.parent_id=d.id
        left join (
        select id as charge_account_id, capital_account_id, charge_amount, remark, charge_time,min(auto_charge_flag) as auto_charge_flag
        from gsms_charge_record
        where charge_time>date_add(now(),interval -1 month)
        group by capital_account_id
        ) g on a.id=g.capital_account_id
        where a.state=0 and a.parent_id is not null and a.enterprise_id=#{chargingAccount.enterpriseId}
        <if test="chargingAccount.accountName != null and chargingAccount.accountName != ''">and a.name like concat('%',#{chargingAccount.accountName},'%')</if>
        <if test="chargingAccount.payingWay >= 0">and a.type=#{chargingAccount.payingWay}</if>
        <if test="chargingAccount.chargeWay >= 0">and a.charge_type=#{chargingAccount.chargeWay}</if>
        group by a.id
        order by a.state,a.id desc
        limit #{param.pi.from}, #{param.pi.size}
    </select>

    <select id="findMsgPriceWithCapitalId" resultType="double">
        select ifnull(max(price),0) from gsms_account_carrier_price where msg_type=#{msgType}
        and capital_account_id = #{capitalAccountId}
    </select>

    <select id="findMsgPriceWithEnterpriseId" resultType="double">
        select ifnull(max(price),0) from gsms_account_carrier_price where capital_account_id is null and
        msg_type=#{msgType} and enterprise_id = #{enterpriseId}
    </select>

    <select id="findChargeAccountInfo" resultMap="chargeAccountMap">
        select a.*,
        max(case when a.deduct_type=0 then b.price else e.price end)  as sms_price,
        max(case when a.deduct_type=0 then c.price else f.price end)  as mms_price
        from gsms_capital_account a
        left join gsms_account_carrier_price b on a.id=b.capital_account_id and b.msg_type=1
        left join gsms_account_carrier_price c on a.id=c.capital_account_id and c.msg_type=2
        left join gsms_capital_account d on a.parent_id=d.id
        left join gsms_account_carrier_price e on d.enterprise_id=e.enterprise_id and e.capital_account_id is null and e.msg_type=1
        left join gsms_account_carrier_price f on d.enterprise_id=f.enterprise_id and f.capital_account_id is null and f.msg_type=2
        where a.parent_id is not null and a.enterprise_id= #{enterpriseId} and a.id = #{capitalAccountId}
    </select>

    <select id="findParentAccountInfo" resultMap="chargeAccountMap">
        select * from gsms_capital_account where 1=1
        <if test="state >= 0">
            and state=#{state}
        </if>
        and parent_id is null and enterprise_id= #{enterpriseId};
    </select>

    <select id="findChildAccountForCharging" resultMap="chargeAccountMap">
        select * from gsms_capital_account where state=0
        and parent_id=#{parentId} and enterprise_id=#{enterpriseId};
    </select>

    <update id="updateBalanceForCharging">
        update gsms_capital_account set balance=balance+#{chargeMoney} where id=#{id};
    </update>

    <insert id="addChargingRecordForCharging" parameterType="com.xuanwu.web.common.entity.ChargingAccount">
        insert into gsms_charge_record (capital_account_id,charge_amount,gift_amount,charge_time,
        balance,efr,operator_id,auto_charge_flag,remark)values(#{chargingAccount.id},
        #{chargingAccount.chargeMoney},0,now(),#{chargingAccount.balance},0,#{chargingAccount.userId},
        #{chargingAccount.autoChargeFlag},#{chargingAccount.remark});
    </insert>

    <select id="getDifferenceByEnterpriseId" resultMap="chargeAccountMap">
        select  a.type,
        a.charge_ratio,
        a.balance,
        sum(ifnull(b.balance,0)) as child_balance,
        case when a.type=0 and a.charge_ratio>0 then (a.balance*a.charge_ratio)-sum(ifnull(b.balance,0)) else 0 end as difference_balance
        from gsms_capital_account a
        left join gsms_capital_account b on a.id=b.parent_id and b.state=0
        where a.parent_id is null
        and a.enterprise_id=#{enterpriseId}
    </select>

    <select id="findChargeAccountUserCount" resultType="int">
        select count(distinct(a.id))
        from gsms_user a
        inner join gsms_user_account_bind b on a.id=b.user_id
        and b.capital_account_id=#{accountUser.capitalAccountId}
        left join gsms_user_role c on a.id=c.user_id
        left join gsms_user dep on a.parent_id=dep.id and dep.type=1
        where a.enterprise_id=#{accountUser.enterpriseId} and a.type=2
        <if test="accountUser.accountName != null and accountUser.accountName != ''">and a.user_name like concat('%',#{accountUser.accountName},'%')</if>
        <if test="accountUser.linkMan != null and accountUser.linkMan != ''">and a.link_man like concat('%',#{accountUser.linkMan},'%')</if>
        <if test="accountUser.roleId > 0">and c.role_id=#{accountUser.roleId}</if>
        <if test="accountUser.identify != null and accountUser.identify != ''">and a.identify like concat('%',#{accountUser.identify},'%')</if>
        <if test="accountUser.deptName != null and accountUser.deptName != ''">and dep.enterprise_name like concat('%',#{accountUser.deptName},'%')</if>
    </select>

    <select id="findChargeAccountUser" resultMap="userMap">
        select a.id,a.user_name,a.link_man,a.state,ifnull(b.capital_account_id,0) as capital_account_id,
        dep.enterprise_name as dep_name,a.phone
        from gsms_user a
        inner join gsms_user_account_bind b on a.id=b.user_id
        and b.capital_account_id=#{capitalAccountId}
        left join gsms_user_role c on a.id=c.user_id
        left join gsms_user dep on a.parent_id=dep.id and dep.type=1
        where a.enterprise_id=#{accountUser.enterpriseId} and a.type=2
        <if test="accountUser.accountName != null and accountUser.accountName != ''">and a.user_name like concat('%',#{accountUser.accountName},'%')</if>
        <if test="accountUser.linkMan != null and accountUser.linkMan != ''">and a.link_man like concat('%',#{accountUser.linkMan},'%')</if>
        <if test="accountUser.roleId > 0">and c.role_id=#{accountUser.roleId}</if>
        <if test="accountUser.identify != null and accountUser.identify != ''">and a.identify like concat('%',#{accountUser.identify},'%')</if>
        <if test="accountUser.deptName != null and accountUser.deptName != ''">and dep.enterprise_name like concat('%',#{accountUser.deptName},'%')</if>
        group by a.id
        order by a.state, a.id desc
        limit #{param.pi.from}, #{param.pi.size}
    </select>

    <select id="isExistAccount" resultType="int">
        select count(1) from gsms_capital_account a where state=0
        and enterprise_id=#{enterpriseId}
        <if test="accountName != null and accountName != ''">and name=#{accountName}</if>
    </select>

    <update id="updateChargingAccount" parameterType="com.xuanwu.web.common.entity.ChargingAccount">
        update gsms_capital_account set type=#{account.payingWay},name=#{account.accountName},
        charge_type=#{account.chargeWay},auto_charge_amount=#{account.autoChargeMoney},
        user_id=#{account.userId},date_time = now(),deduct_type=#{account.deductType},
        rechargedate=#{account.reChargeDate}
        where parent_id is not null and enterprise_id=#{account.enterpriseId} and id =#{account.id}
    </update>

    <update id="updateCarrierPrice">
        update gsms_account_carrier_price set price=#{msgPrice} where enterprise_id=#{enterpriseId}
        and capital_account_id =#{id} and msg_type=#{msgType} and carrier_id=#{carrierId}
    </update>

    <update id="deleteChargingAccount">
        update gsms_capital_account set state=1 where id=#{capitalAccountId}
        and enterprise_id=#{enterpriseId}
    </update>

    <update id="updateAccountBind">
        update gsms_user_account_bind set capital_account_id=#{parentCapitalAccountId}
        where capital_account_id=#{capitalAccountId}
    </update>

    <select id="getAsyncChargeAccountDeptTop" resultMap="deptMap">
        select  distinct(c.id),a.enterprise_name as name,(case when ifnull((select count(1) from gsms_user u
        inner join gsms_user_account_bind ub on u.id=ub.user_id where u.parent_id=c.id and u.state!=2 and u.type=1
        and ub.capital_account_id=#{capitalAccountId}),0)>0 then 1 else 0 end) as isparent
        from gsms_user a
        inner join gsms_user c on a.id=c.parent_id
        where a.type = 0 and a.id=#{enterpriseId} order by a.id
    </select>

    <select id="getAsyncChargeAccountDept" resultMap="deptMap">
        select distinct(a.id),a.enterprise_name as name,(case when ifnull((select count(1) from gsms_user u
        inner join gsms_user_account_bind ub on u.id=ub.user_id where u.parent_id=a.id and u.state!=2 and u.type=1
        and ub.capital_account_id=#{capitalAccountId}),0)>0 then 1 else 0 end) as isparent
        from gsms_user a
        inner join gsms_user_account_bind b on a.id=b.user_id
        where a.type = 1 and a.parent_id=#{parentId} and b.capital_account_id=#{capitalAccountId} order by a.id
    </select>

    <select id="findAccountUserCount" resultType="int">
        select count(distinct(a.id))
        from gsms_user a
        left join gsms_user_account_bind b on a.id=b.user_id
        left join gsms_user_role c on a.id=c.user_id
        left join gsms_user d on a.parent_id = d.id and d.type=1
        inner join gsms_user_account_bind e on d.id=e.user_id
        where a.enterprise_id=#{accountUser.enterpriseId}
        and a.parent_id!=#{accountUser.enterpriseId} and a.type=2 and d.type=1
        and e.capital_account_id=#{accountUser.capitalAccountId}
        <if test="accountUser.accountName != null and accountUser.accountName != ''"> and a.user_name like concat('%',#{accountUser.accountName},'%')</if>
        <if test="accountUser.linkMan != null and accountUser.linkMan != ''">and a.link_man like concat('%',#{accountUser.linkMan},'%')</if>
        <if test="accountUser.identify != null and accountUser.identify != ''">and a.identify like concat('%',#{accountUser.identify},'%')</if>
        <if test="accountUser.roleId > 0">and c.role_id=#{accountUser.roleId}</if>
        <if test="accountUser.showAllChild == 1 and accountUser.enterpriseId != accountUser.parentId-1">
            and (d.id in (select b.id from gsms_user a
            left join gsms_user b on b.path like concat(a.path,a.id,'%')
            where a.id=#{accountUser.parentId} and b.type=1) or d.id=#{accountUser.parentId})
        </if>
        <if test="accountUser.showAllChild == 0">
            and a.parent_id=#{accountUser.parentId}
        </if>
        <if test="accountUser.includedType == 1">
            and b.capital_account_id =#{accountUser.capitalAccountId}
        </if>
        <if test="accountUser.includedType == 0">
            and (b.capital_account_id is null or b.capital_account_id !=#{accountUser.capitalAccountId})
        </if>
    </select>

    <select id="findAccountUsers" resultMap="userMap">
        select a.id,a.user_name,a.link_man,a.state,ifnull(b.capital_account_id,0) as capital_account_id,
        d.enterprise_name as dep_name,a.phone
        from gsms_user a
        left join gsms_user_account_bind b on a.id=b.user_id
        left join gsms_user_role c on a.id=c.user_id
        left join gsms_user d on a.parent_id = d.id and d.type=1
        inner join gsms_user_account_bind e on d.id=e.user_id
        where a.enterprise_id=#{accountUser.enterpriseId}
        and a.parent_id!=#{accountUser.enterpriseId} and a.type=2 and d.type=1
        <if test="accountUser.accountName != null and accountUser.accountName != ''"> and a.user_name like concat('%',#{accountUser.accountName},'%')</if>
        <if test="accountUser.linkMan != null and accountUser.linkMan != ''">and a.link_man like concat('%',#{accountUser.linkMan},'%')</if>
        <if test="accountUser.identify != null and accountUser.identify != ''">and a.identify like concat('%',#{accountUser.identify},'%')</if>
        <if test="accountUser.roleId > 0">and c.role_id=#{accountUser.roleId}</if>
        <if test="accountUser.showAllChild == 1 and accountUser.enterpriseId != accountUser.parentId-1">
            and (d.id in (select b.id from gsms_user a
            left join gsms_user b on b.path like concat(a.path,a.id,'%')
            where a.id=#{accountUser.parentId} and b.type=1) or d.id=#{accountUser.parentId})
        </if>
        <if test="accountUser.showAllChild == 0">
            and a.parent_id=#{accountUser.parentId}
        </if>
        <if test="accountUser.includedType == 1">
            and b.capital_account_id =#{accountUser.capitalAccountId}
        </if>
        <if test="accountUser.includedType == 0">
            and (b.capital_account_id is null or b.capital_account_id !=#{accountUser.capitalAccountId})
        </if>
        group by a.id
        order by a.state, a.id desc
        limit #{param.pi.from}, #{param.pi.size}
    </select>

    <delete id="deleteUserAccountBind">
        delete from gsms_user_account_bind where user_id in
        <foreach collection="userIds" item="userId" open="(" separator="," close=")">#{userId}</foreach>
    </delete>

    <insert id="insertUserAccountBind">
        insert into gsms_user_account_bind(user_id,capital_account_id) values
        <foreach collection="userIds" item="userId" separator=",">(#{userId},#{capitalAccountId})</foreach>
    </insert>

    <update id="updateCancelUserAccount">
        update gsms_user_account_bind set capital_account_id=#{capitalAccountId} where user_id in
        <foreach collection="userIds" item="userId" open="(" separator="," close=")">#{userId}</foreach>
    </update>

    <insert id="addChargeAccount" useGeneratedKeys="true" keyProperty="id">
        insert into gsms_capital_account
        (balance,type,enterprise_id,name,parent_id,charge_type,
        auto_charge_amount, user_id,date_time,deduct_type,rechargedate)
        values
        (#{balance},#{payingWay},#{enterpriseId},#{accountName},
        #{parentId},#{chargeWay},#{autoChargeMoney},#{userId},now(),
        #{deductType},0)
    </insert>

    <insert id="addAccountCarrierPrice">
        insert into gsms_account_carrier_price
        (price,enterprise_id,msg_type,capital_account_id,carrier_id)
        values
        (#{msgPrice},#{enterpriseId},#{msgType},#{capitalAccountId},#{carrierId});
    </insert>

    <select id="getRecordCount" resultType="int">
        select count(1)
        from gsms_charge_record a inner join gsms_capital_account b on a.capital_account_id = b.id
        where b.parent_id is not null and b.state=0 and b.enterprise_id=#{record.entId}
        <if test="record.accountName != null and record.accountName != ''">
            and b.name like concat('%',#{record.accountName},'%')
        </if>
        <if test="record.chargeWay > -1">
            and a.charge_type=#{record.chargeWay}
        </if>
        <if test="record.chargeState > -1">
            and a.auto_charge_flag=#{record.chargeState}
        </if>
        <if test="record.beginTime!= null"> and a.charge_time &gt;= #{record.beginTime}</if>
        <if test="record.endTime!= null"> and a.charge_time &lt;= #{record.endTime}</if>
    </select>

    <select id="listRecords" resultMap="chargingRecordMap">
        select a.id,a.capital_account_id,a.charge_amount,a.charge_time,a.remark,a.operator_id,a.charge_type,
        a.auto_charge_flag,b.enterprise_id,b.name,b.balance,u.user_name
        from gsms_charge_record a inner join gsms_capital_account b on a.capital_account_id = b.id
        left join gsms_user u on a.operator_id = u.id
        where b.parent_id is not null and b.state=0
        <if test="record.accountName != null and record.accountName != ''">
            and b.name like concat('%',#{record.accountName},'%')
        </if>
        <if test="record.chargeWay > -1">
            and a.charge_type=#{record.chargeWay}
        </if>
        <if test="record.chargeState > -1">
            and a.auto_charge_flag=#{record.chargeState}
        </if>
        <if test="record.beginTime!= null"> and a.charge_time &gt;= #{record.beginTime}</if>
        <if test="record.endTime!= null"> and a.charge_time &lt;= #{record.endTime}</if>
        order by a.id desc
        limit #{param.pi.from}, #{param.pi.size}
    </select>

    <select id="findFailChargingRecords" resultMap="chargingRecordMap">
        select a.id,a.capital_account_id,a.charge_amount,a.charge_time,a.remark,a.operator_id,a.charge_type,
        a.auto_charge_flag,b.enterprise_id,b.name,b.balance
        from gsms_charge_record a
        inner join gsms_capital_account b on a.capital_account_id = b.id
        where b.parent_id is not null
        and b.enterprise_id=#{enterpriseId}
        and b.state=0
        and a.charge_type=1
        and a.auto_charge_flag=false
        and a.charge_time>date_add(now(),interval -1 month)
    </select>

    <select id="updateChargingRecord">
        update gsms_charge_record set auto_charge_flag=#{record.autoChargeFlag},
        remark=#{record.remark} where id=#{record.id} ;
    </select>
</mapper>
