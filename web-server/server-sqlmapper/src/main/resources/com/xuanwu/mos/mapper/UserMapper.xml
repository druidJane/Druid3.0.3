<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.xuanwu.mos.mapper.UserMapper">

    <resultMap id="simpleUserMap" type="com.xuanwu.mos.domain.entity.SimpleUser">
        <id property="id" column="id" />
        <result property="username" column="user_name" />
        <result property="linkMan" column="link_man" />
        <result property="phone" column="phone" />
        <result property="password" column="password" />
        <result property="state" column="state" />
        <result property="secondPassword" column="second_password" />
        <result property="parentId" column="parent_id" />
        <result property="enterpriseId" column="enterprise_id" />
        <result property="platformId" column="platform_id" />
        <result property="lastLoginTime" column="last_login_time"/>
        <result property="path" column="path" />
        <result property="deptId" column="dept_id" />
        <result property="deptName" column="dept_name" />
        <result property="enterpriseName" column="enterprise_name" />
        <result property="deptPath" column="dept_path" />
        <result property="capitalAccountName" column="capital_account_name" />
        <result property="loginErrorTimes" column="login_error_times" />
        <result property="isFirstTimeLogin" column="is_first_time_login" />
	    <result property="validDay" column="validDay" />
        <result property="remark" column="remark" />
        <result property="identify" column="identify" />
        <result property="signature" column="signature" />
        <result property="sigLocation" column="sig_location" />
        <result property="balance" column="balance" />
        <result property="balanceremind" column="balanceremind" />
        <result property="lastUpdateTime" column="last_update_time" />
        <result property="istest" column="istest" />
        <result property="testenddate" column="testenddate" />
        <result property="transmitPassword" column="mid_password" />
    </resultMap>

    <resultMap id="gsmsUserMap" type="com.xuanwu.mos.domain.entity.GsmsUser">
        <id property="id" column="id" />
        <result property="state" column="state" />
        <result property="parentId" column="parent_id" />
        <result property="identify" column="identify" />
        <result property="phone" column="phone" />
        <result property="signature" column="signature" />
        <result property="sigLocation" column="sig_location" />
        <result property="enterpriseName" column="enterprise_name" />
        <result property="enterpriseId" column="enterprise_id" />
        <result property="linkMan" column="link_man" />
        <result property="domain" column="domain" />
        <result property="path" column="path" />
        <discriminator javaType="int" column="type">
            <case value="0" resultType="enterprise">
                <result property="initPassword" column="init_password" />
                <result property="auditingFlag" column="auditing_flag" />
                <result property="auditingNum" column="auditing_num" />
                <result property="auditingMmsFlag" column="auditing_mms_flag" />
                <result property="auditingMmsNum" column="auditing_mms_num" />
                <result property="enableBlackListFilter" column="enable_black_list_filter" />
                <result property="enableKeywordFilter" column="enable_keyword_filter" />
                <result property="monthlyStatStart" column="monthly_stat_start" />
                <result property="auditingMaterialFlag" column="auditing_material_flag" />
                <result property="monthlyStatEnd" column="monthly_stat_end" />
                <result property="moUserName" column="moUserName" />
                <result property="balanceRemind" column="balanceremind" />
                <result property="deptNoPrefix" column="department_identify_prefix" />
                <result property="trustFlag" column="trust_flag" />
                <result property="enabledExport" column="enabledexport" />
                <result property="transparentSend" column="is_transparent_send" />
                <result property="test" column="istest" />
                <result property="disableGlobalKeyWorld" column="disable_global_keyword"/>
                <result property="isWarningKeyWord" column="iswarningkeyword"/>
            </case>
            <case value="1" resultType="department">
                <result property="deptName" column="enterprise_name" />
            </case>
            <case value="2" resultType="user">
                <result property="userName" column="user_name" />
                <result property="secondPassword" column="second_password" />
                <result property="isFirstTimeLogin" column="is_first_time_login" />
                <result property="lastLoginTime" column="last_login_time" />
                <result property="hasSendMessage" column="has_send_message" />
                <result property="accountType" column="account_type" />
                <result property="protocolType" column="protocol_type" />
                <result property="srcPort" column="source_port" />
                <result property="customerSignature" column="custom_autograph" />
                <result property="callbackAddress" column="callback_address" />
                <result property="sendSpeed" column="mid_receive_speed" />
                <result property="linkNum" column="mid_max_connection" />
                <result property="upPush" column="up_push" />
                <result property="statusReportPush" column="status_report_push" />
                <result property="pushAddress" column="push_address" />
                <result property="reportPushAddress" column="report_push_address" />
            </case>
        </discriminator>
    </resultMap>

    <resultMap id="bizTypeMap" type="com.xuanwu.mos.domain.entity.BizType">
        <id property="id" column="id" />
        <result property="userId" column="user_id" />
        <result property="extendFlag" column="extend_flag" />
        <result property="priority" column="priority" />
        <result property="name" column="name" />
        <result property="state" column="state" />
        <result property="startTime" column="start_time" />
        <result property="endTime" column="end_time" />
        <result property="enterpriseId" column="enterprise_id" />
        <result property="type" column="type" />
        <result property="remark" column="remark" />
        <result property="busType" column="bus_type" />
        <result property="mmsMaxLength" column="mms_max_length" />
        <result property="speed" column="sendspeed"/>
        <result property="speedMode" column="speedunit"/>
    </resultMap>


    <select id="getLoginUser" resultMap="simpleUserMap">
        select gu.id,gu.second_password,gu.password,gu.state,gu.user_name,gu.path,gu.identify,
		gu.parent_id, gu.enterprise_id, gul.login_error_num as login_error_times, gu.is_first_time_login, gu.validDay, gu.validDate last_update_time,
		gu.platform_id,gul.last_login_time,gu.enterprise_name as enterprise_name,gu.path,gu.signature,gu.sig_location, gui.mid_password
		from gsms_user gu join gsms_user_login gul on gul.user_id = gu.id left join gsms_user_info gui on gui.user_id = gu.id
		where
		gu.user_name = #{username} and gu.platform_id = #{platformId} and gu.type = 2 and gu.state != 2
        limit 1
    </select>

    <select id="getAccountInfo" resultMap="simpleUserMap">
        select gu.id,gu.second_password,gu.user_name,gu.identify,gu.link_man,gu.signature,gu.sig_location,gu.remark,gu.phone,
        gul.last_login_time,gu.validDate as last_update_time,dep.enterprise_name as dept_name,ext.istest as istest,
        date_format(ext.testenddate,'%Y-%m-%d') as testenddate,
        <choose>
            <when test="platform_id == 0">
                ent.balanceremind_back as balanceremind
            </when>
            <otherwise>
                ent.balanceremind as balanceremind
            </otherwise>
        </choose>
        from gsms_user gu
        left join gsms_user_login gul on gul.user_id = gu.id
        left join gsms_user dep on gu.parent_id = dep.id
        left join gsms_user ent on ent.id = gu.enterprise_id
        left join gsms_user_ext ext on ext.enterprise_id = gu.enterprise_id
        <!-- left join gsms_capital_account gca on (gca.parent_id IS NULL or gca.parent_id = 0) and gca.enterprise_id = gu.enterprise_id -->
        where gu.id = #{userId}
        limit 1
    </select>
    
    <select id="getExsitBindAccountOfUser" resultType="int">
    	SELECT COUNT(1) FROM gsms_user_account_bind WHERE user_id = #{userId}
    </select>
    
    <select id="getUserofAccountBalance" resultType="double">
    	SELECT ca.balance FROM gsms_user_account_bind ab JOIN gsms_capital_account ca ON  ab.capital_account_id = ca.id WHERE ab.user_id  = #{userId}
    </select>
    <select id="getEnterpriseAccountBalance" resultType="double">
    	  SELECT balance FROM gsms_capital_account WHERE parent_id IS NULL AND enterprise_id = #{enterpriseId}
    </select>
    <update id="updateAccInfo">
        update gsms_user set link_man = #{linkMan}, phone = #{phone} where id = #{userId}
    </update>

    <select id="getLoginEnt" resultMap="gsmsUserMap">
        SELECT u.*, ux.default_mo_user as mo_user,up.user_name as mo_username,  u.enable_black_list_filter , u.enable_keyword_filter,ux.disable_global_keyword,
        ux.trust_flag, ux.enabledexport, ux.istest
        FROM gsms_user  u  LEFT JOIN  gsms_user_ext ux ON u.id=ux.enterprise_id LEFT JOIN  gsms_user up ON up.id=ux.default_mo_user  WHERE
        u.id = #{entId}
        limit 1
    </select>

    <select id="getTrustIps" resultType="string">
        select GROUP_CONCAT(trust_ip) from gsms_user_trust_ip where enterprise_id= #{entId} and platform_id = #{platformId} and  trust_ip != #{excludeIp}
    </select>

    <select id="getEnterprisePhonesById" resultType="string">
        select phone from gsms_enterprise_phone where istemp=0 and enterprise_id = #{id}
    </select>

    <select id="getEnterpriseBaseInfoById" resultMap="gsmsUserMap" parameterType="map">
        select * from gsms_user u
        where type = 0 and u.id = #{enterpriseId}
    </select>

    <select id="getById" resultMap="gsmsUserMap" parameterType="integer">
        select * from gsms_user where id = #{id}
    </select>

    <!-- 根据消息类型查找业务类型 -->
    <select id="findBizByMsgType" resultMap="bizTypeMap">
        select b.id, b.name, b.start_time, b.end_time, b.type, a.bus_type
        <if test="msgType == 2">,f.mms_max_length </if>
        from gsms_user_business_type a
        left join gsms_business_type b on
        a.type_id=b.id
        left join gsms_biztype_specnum c on
        a.type_id=c.biztype_id
        left join gsms_enterprise_specnum_bind d on
        c.enterprise_specnum_bind_id=d.id
        <if test="msgType == 2">
            left join gsms_specsvs_num e on d.specnum_id=e.id
            left join
            gsms_carrier_channel f on e.channel_id=f.id
        </if>
        where a.user_id=#{userId} and d.msg_type=#{msgType} and b.state=1
        order by b.id
    </select>

    <update id="updateLastLoginTime">
        update gsms_user_login set last_login_time = #{lastLoginTime},
        <choose>
            <when test="selfAdd == true">
                login_error_num = login_error_num +1
            </when>
            <otherwise>
                login_error_num = 0
            </otherwise>
        </choose>
         where user_id = #{id}
    </update>

    <insert id="addUserLogin" parameterType="user">
        insert into gsms_user_login (user_id) values (#{id})
    </insert>

    <update id="updatePassword">
         update gsms_user set second_password = #{newPassword},is_first_time_login = 0, validDate = now() where id = #{id}
    </update>

    <!-- 根据用户ID查找绑定业务类型详情 -->
    <select id="findBizTypes" resultMap="bizTypeMap">
        select a.*, b.bus_type from
        gsms_business_type a
        inner join gsms_user_business_type b on
        b.type_id=a.id
        where b.user_id=#{userId} and a.state=1
    </select>

    <!-- 根据用户ID查找用户 -->
    <select id="findGsmsUser" resultMap="gsmsUserMap">
        select u.*,u1.enterprise_name as enterprise_name, up.user_name as moUserName,
		ui.account_type,ui.protocol_type, ui.source_port, ui.custom_autograph,ui.callback_address,
		ui.mid_receive_speed, ui.mid_max_connection, en.is_transparent_send
		from gsms_user u
		left join gsms_user u1 on u.parent_id=u1.id
        left join gsms_user_info ui on u.id = ui.user_id
        left join  gsms_user_ext ux on u.id=ux.default_mo_user
        left join  gsms_user_ext en on u.id=en.enterprise_id
        left join  gsms_user up on up.id=en.default_mo_user
        where u.id=#{id}
    </select>

    <!-- 根据父ID查找子用户类型 -->
    <select id="findChildTypes" resultType="int">
        select type from
        gsms_user where parent_id=#{parentId} and (state=0 or state=1) group
        by type
    </select>

    <!-- 根据部门名称，查找部门名称是否已存在，部门唯一 -->
    <select id="findDeptNameExist" resultType="int">
        select count(1) from gsms_user where parent_id=#{user.parentId}
        and
        type=1 and (state=0 or state=1)
        and enterprise_name=#{user.deptName}
        <if test="user.id > 0">and id != #{user.id}</if>
    </select>

    <sql id="chargeUserSql">
        <if test="params.userName != null">and a.user_name like concat('%',#{params.userName},'%')</if>
        <if test="params.linkMan != null">and a.link_man like concat('%',#{params.linkMan},'%')</if>
        <if test="params.roleId != null">and c.role_id=#{params.roleId}</if>
        <if test="params.identify != null">and a.identify like concat('%',#{params.identify},'%')</if>
        <if test="params.deptName != null">and dep.enterprise_name like concat('%',#{params.deptName},'%')</if>
    </sql>

    <select id="findChargeUserCount" resultType="int">
        select count(distinct(a.id))
        from gsms_user a
        inner join gsms_user_account_bind b on a.id=b.user_id
        and b.capital_account_id=#{params.capitalAccountId}
        left join gsms_user_role c on a.id=c.user_id
        left join gsms_user dep on a.parent_id=dep.id and dep.type=1
        where a.enterprise_id=#{params.enterpriseId}
        and a.type=2 and a.platform_id = #{params.platformId}
        <include refid="chargeUserSql"/>
    </select>

    <select id="findChargeUsers" resultMap="simpleUserMap">
        select a.id,a.user_name,a.link_man,a.state,ifnull(b.capital_account_id,0) as capital_account_id,
        dep.enterprise_name as dept_name,a.phone
        from gsms_user a
        inner join gsms_user_account_bind b on a.id=b.user_id
        and b.capital_account_id=#{params.capitalAccountId}
        left join gsms_user_role c on a.id=c.user_id
        left join gsms_user dep on a.parent_id=dep.id and dep.type=1
        where a.enterprise_id=#{params.enterpriseId}
        and a.type=2 and a.platform_id = #{params.platformId}
        <include refid="chargeUserSql"/>
        group by a.id
        order by a.id desc
        limit #{page.from}, #{page.size}
    </select>

    <!--<select id="getChargeAccountDepts" resultMap="gsmsUserMap">
        select  distinct(c.id),a.enterprise_name as name,(case when ifnull((select count(1) from gsms_user u
        inner join gsms_user_account_bind ub on u.id=ub.user_id where u.parent_id=c.id and u.state!=2 and u.type=1
        and ub.capital_account_id=#{capitalAccountId}),0)>0 then 1 else 0 end) as isparent
        from gsms_user a
        <if test="isTop">
            inner join gsms_user c on a.id=c.parent_id
            where a.type = 0 and a.id=#{enterpriseId} order by a.id
        </if>
        <if test="!isTop">
            inner join gsms_user_account_bind b on a.id=b.user_id
            where a.type = 1 and a.parent_id=#{parentId} and b.capital_account_id=#{capitalAccountId} order by a.id
        </if>
    </select>-->

    <sql id="userSelectorSql">
        <if test="params.userName != null"> and u.user_name like concat('%',#{params.userName},'%')</if>
        <if test="params.linkMan != null">and u.link_man like concat('%',#{params.linkMan},'%')</if>
        <if test="params.identify != null">and u.identify like concat('%',#{params.identify},'%')</if>
        <if test="params.roleId != null">and r.role_id=#{params.roleId}</if>
        <if test="params.showAllChild == true">
            <if test="params.rootPath != null">
                and u.path like concat(#{params.rootPath},'%')
            </if>
            <if test="params.path != null">
                and u.path like concat(#{params.path},'%')
            </if>
        </if>
        <if test="params.showAllChild == false">
            and u.parent_id=#{params.parentId}
        </if>
        <if test="params.includedType == 1">
            and b.capital_account_id =#{params.capitalAccountId}
        </if>
        <if test="params.includedType == 0">
            and (b.capital_account_id is null or b.capital_account_id !=#{params.capitalAccountId})
        </if>
    </sql>

    <select id="findSelectorUserCount" resultType="int" parameterType="map">
        select count(distinct(u.id)) from gsms_user u
        left join gsms_user_account_bind b on u.id = b.user_id
        left join gsms_capital_account gc on b.capital_account_id = gc.id
        left join gsms_user_role r on u.id = r.user_id
        left join gsms_user d on u.parent_id = d.id and d.type=1
        where u.enterprise_id = #{params.enterpriseId} and u.type = 2 and u.state !=2
        and u.parent_id != #{params.enterpriseId} and u.platform_id=#{params.platformId}
        <include refid="userSelectorSql"/>
    </select>

    <select id="findSelectorUsers" resultMap="simpleUserMap" parameterType="map">
        select u.id, u.user_name, u.link_man, u.state, ifnull(b.capital_account_id,0) as capital_account_id,
        d.enterprise_name as dept_name, u.phone, gc.name as capital_account_name
        from gsms_user u
        left join gsms_user_account_bind b on u.id = b.user_id
        left join gsms_capital_account gc on b.capital_account_id = gc.id
        left join gsms_user_role r on u.id = r.user_id
        left join gsms_user d on u.parent_id = d.id and d.type=1
        where u.enterprise_id = #{params.enterpriseId} and u.type = 2 and u.state !=2
        and u.parent_id != #{params.enterpriseId} and u.platform_id=#{params.platformId}
        <include refid="userSelectorSql"/>
        group by u.id
        order by u.id desc
        limit #{page.from}, #{page.size}
    </select>

    <select id="isExistDeptName" parameterType="Department" resultType="int">
        select count(1) from gsms_user where
        type=1 and (state=0 or state=1)
        and enterprise_name=#{deptName}
        <if test="parentId > 0">and parent_id = #{parentId}</if>
        <if test="id > 0">and id != #{id}</if>
    </select>

    <!-- 根据部门编号或用户扩展码，查找是否已存在，企业唯一 -->
    <select id="isExistIdentify" parameterType="map" resultType="int">
        select count(1) from gsms_user
        where identify=#{identity}
        and type=#{userType.index} and (state=0 or state=1)
        and enterprise_id=#{enterpriseId}
        <if test="id > 0">and id != #{id}</if>
    </select>

    <update id="updateDepartment" parameterType="Department">
        update gsms_user set enterprise_name = #{deptName},
        remark = #{remark} where id = #{id}
    </update>

    <select id="findUserByName" parameterType="map" resultType="User">
        select id, user_name as userName from gsms_user
        where type=2
        <if test="includeDel == false">
            and (state=0 or state =1)
            and user_name=#{userName}
        </if>
        <if test="includeDel == true">
            and (user_name=concat(#{userName}, '【已删除】') or user_name=#{userName})
        </if>
        and enterprise_id=#{enterpriseId} limit 1
    </select>

    <insert id="addUser" parameterType="User" useGeneratedKeys="true" keyProperty="id">
        insert into gsms_user
        <trim suffixOverrides=",">
            <set>
                user_name = #{userName}, second_password = #{secondPassword}, link_man = #{linkMan},
                phone = #{phone}, identify = #{identify}, remark = #{remark}, parent_id = #{parentId},
                type = #{userType.index}, create_time = #{createTime}, path = #{path}, state = #{state.index},
                enterprise_id = #{enterpriseId}, signature = #{signature}, sig_location = #{sigLocation},
                platform_id = #{platformId}, priority = #{priority},
                <if test="password != null">password = #{password}</if>
            </set>
        </trim>
    </insert>
    <select id="findEnterpriseByName" resultType="User">
        SELECT * FROM gsms_user where type = 0 and enterprise_name = #{enterpriseName}
    </select>

    <!-- by jiangziyuan-->
    <select id="findUserNameById" resultType="string">
        select user_name from
        gsms_user where id=#{id}
    </select>

    <!-- 根据企业ID查找该企业下所有部门 -->
    <select id="findAllEntDepts" resultMap="gsmsUserMap">
        select id, state,
        parent_id, type, identify, enterprise_name, path from gsms_user
        where
        enterprise_id=#{entId} and type=1 and state = 0
    </select>

    <!-- 根据企业ID查找该企业下所有部门(自动补全查询) -->
    <select id="findAllEntDeptsIncludeDel" resultMap="gsmsUserMap">
        select id,
        state, parent_id, type, identify, enterprise_name, path from gsms_user
        where enterprise_id=#{entId} and type=1
    </select>

    <select id="findUsersSimple" resultMap="gsmsUserMap">
        select id, user_name, state, parent_id, type, identify from gsms_user
        where type = 2
        <if test="entId > 0">and enterprise_id= #{entId}</if>
        <if test="path != null">and path like concat(#{path}, '%')</if>
        <if test="name != null">and user_name like concat(#{name}, '%')</if>
        limit ${maxSize}
    </select>

    <select id="findUsersSimpleNotDel" resultMap="gsmsUserMap">
        select id, user_name, state, parent_id, type, identify from gsms_user
        where type = 2 and state != 2
        <if test="entId > 0">and enterprise_id= #{entId}</if>
        <if test="path != null">and path like concat(#{path}, '%')</if>
        <if test="name != null">and user_name like concat(#{name}, '%')</if>
        limit ${maxSize}
    </select>

    <select id="findSendSmsPermitId" resultType="int">
        select a.id from
        gsms_user a
        left join gsms_user_role b on b.user_id = a.id
        left join
        gsms_role c on b.role_id = c.id
        left join gsms_role_permission d on
        d.role_id = c.id
        left join gsms_permission e on d.permission_id = e.id
        where a.enterprise_id = #{enterpriseId} and e.area_name = 'smsmgmt'
        and e.controller_name = 'sendsms'
        and e.action_name = 'doSend'
    </select>

    <!-- 简单企业查询，一般用于自动补全 -->
    <select id="findSimpleEnts" resultMap="gsmsUserMap">
        select u.id,u.domain,u.state,u.type,u.enterprise_name,u.signature from
        gsms_user u where u.type=0
        <if test="states != null">
            and u.state in
            <foreach collection="states" item="item" open="(" separator=","
                     close=")">#{item.index}</foreach>
        </if>
        <if test="ent.salemanId > 0">and u.saleman_id=#{ent.salemanId}</if>
        <if test="ent.path != null">and u.saleman_id in(select s.id from gsms_user s where
            s.path like concat(#{ent.path}, '%'))</if>
        <if test="ent.domain != null">and u.domain like concat('%',#{ent.domain},'%')</if>
        <if test="ent.parentId >=0">and u.parent_id=#{ent.parentId}</if>
        <if test="ent.parentId ==-2">and u.parent_id>0</if>
        <if test="ent.platformId >= 0">and u.platform_id=#{ent.platformId}</if>
        <if test="param != null">limit #{param.pi.size}</if>
    </select>

    <!-- 简单用户查询，一般用于自动补全 -->
    <select id="findSimpleUsers" resultMap="gsmsUserMap">
        select id,user_name,state,parent_id,type,identify
        from gsms_user where
        type=2
        <if test="states != null">
            and state in
            <foreach collection="states" item="item" open="(" separator=","
                     close=")">#{item.index}</foreach>
        </if>
        <if test="user.enterpriseId > 0">and enterprise_id= #{user.enterpriseId}</if>
        <if test="user.path != null">and path like concat(#{user.path},'%')</if>
        <if test="user.userName != null">and user_name like concat(#{user.userName},'%')</if>
        <if test="user.platformId >= 0">and platform_id=#{user.platformId}</if>
        <if test="param != null">limit #{param.pi.size}</if>
    </select>

    <select id="findPathById" resultType="String">
        select path from gsms_user
        where id=#{id}
    </select>

    <update id="updateEnterprise" parameterType="map">
        update gsms_user set signature=#{enterprise.signature},sig_location=#{enterprise.sigLocation},
        auditing_flag=#{enterprise.auditingFlag},auditing_num=#{enterprise.auditingNum},
        auditing_mms_flag=#{enterprise.auditingMmsFlag},auditing_mms_num=#{enterprise.auditingMmsNum},
        department_identify_prefix=#{enterprise.deptNoPrefix},monthly_stat_start=#{enterprise.monthlyStatStart},
        monthly_stat_end=#{enterprise.monthlyStatEnd},balanceremind=#{enterprise.balanceRemind}
        where id=#{entId}
    </update>

    <update id="updateMoUser" parameterType="map">
        update gsms_user_ext set default_mo_user=#{defaultMoUserId} where enterprise_id=#{entId}
    </update>

    <select id="autoCompleteUserName" parameterType="map" resultMap="simpleUserMap">
        select * from gsms_user
        where type=2

        and platform_id = #{params.platformId}
        <if test="params.path!=null">
            and path like concat(#{params.path},'%')
        </if>
        <if test="!params.selectALL">
            and state!=2
        </if>
        <if test="params.enterpriseId !=null">
            and enterprise_id = #{params.enterpriseId}
        </if>
        <if test="params.userName!=null and params.userName!=''">
            and user_name LIKE  concat('%',#{params.userName},'%')
        </if>
        <if test="params.userId!=null and params.userId>0">
            and id = #{params.userId}
        </if>
    </select>
    
    <select id="autoCompleteUserName4UserStat" parameterType="map" resultMap="simpleUserMap">
       select * from gsms_user where type=2
       and enterprise_id = #{params.enterpriseId} and platform_id = #{params.platformId}
        <if test="params.userName!=null and params.userName!=''"> and user_name LIKE  concat('%',#{params.userName},'%')</if>
        <if test="params.path!=null and params.path!=''">
         	and path LIKE  concat(#{params.path}, '%')
        </if>
        <if test="params.userId!=null and params.userId!=''">
        	and id =#{params.userId}
        </if>
    </select>

    <insert id="addUserInfo" parameterType="User">
        insert into gsms_user_info
        <trim suffixOverrides=",">
            <set>
                user_id = #{id}, enterprise_id = #{enterpriseId},
                account_type = #{accountType.index},
                custom_autograph = #{customerSignature},
                timeinterval = #{userTimeInterval}, content_timeinterval = #{userContentInterval},
                sendnum = #{userSendNum},
                <if test="contentSendnum != null">
                    content_sendnum = #{contentSendnum},
                </if>
                <if test="accountType.index == 3">
                    <if test="protocolType != null">
                        protocol_type = #{protocolType.index},
                        <if test="protocolType.index == 3">callback_address = #{callbackAddress},</if>
                    </if>
                    <if test="srcPort != null">source_port = #{srcPort},</if>
                    <if test="midPassword != null">mid_password = #{midPassword},</if>
                    <if test="sendSpeed > 0">mid_receive_speed = #{sendSpeed},</if>
                    <if test="linkNum > 0">mid_max_connection = #{linkNum}</if>
                </if>
                <if test="accountType.index != 3">
                    up_push = #{upPush},
                    push_address = #{pushAddress},
                    status_report_push = #{statusReportPush},
                    report_push_address = #{reportPushAddress}
                </if>
            </set>
        </trim>
    </insert>

    <update id="resetSendPwd" parameterType="User">
        update gsms_user set password = #{password} where id = #{id}
    </update>

    <update id="resetLoginPwd" parameterType="User">
        update gsms_user set second_password = #{secondPassword} where id = #{id}
    </update>

    <update id="resetMidPwd" parameterType="User">
        update gsms_user_info set mid_password = #{midPassword} where user_id = #{id}
    </update>

    <update id="updateUserInfo" parameterType="User">
        update gsms_user_info
        <trim prefix="set" suffixOverrides=",">
            account_type = #{accountType.index},
            custom_autograph = #{customerSignature},
            <if test="accountType.index == 3">
                protocol_type = #{protocolType.index}, source_port = #{srcPort},
                mid_receive_speed = #{sendSpeed}, mid_max_connection = #{linkNum},
                callback_address = #{callbackAddress}
            </if>
        </trim>
        where user_id = #{id}
    </update>

    <select id="findSimpleUserById" resultMap="simpleUserMap">
        select id, enterprise_name, path from gsms_user where id = #{id}
    </select>

    <select id="findDeptNameById" resultMap="simpleUserMap">
        select dept.id, dept.enterprise_name, gu.path 
        from gsms_user gu inner join gsms_user dept on gu.parent_id = dept.id 
        where gu.id = #{id}
    </select>

    <select id="existUserName" parameterType="User" resultType="int">
        select count(1) from gsms_user where
        type=2 and (state=0 or state=1)
        and enterprise_id = #{enterpriseId} and user_name=#{userName}
        <if test="id > 0">and id != #{id}</if>
    </select>

</mapper>